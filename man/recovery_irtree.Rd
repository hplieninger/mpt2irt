% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation.R
\name{recovery_irtree}
\alias{recovery_irtree}
\title{Recovery simulation of mpt2irt models.}
\usage{
recovery_irtree(rrr = NULL, N = NULL, J = NULL, prop.rev = 0.5,
  genModel = c("ext", "2012"), fitModel = c("ext", "2012", "pcm",
  "steps", "shift", "ext2"), fitMethod = c("stan", "jags"),
  theta_vcov = NULL, betas = NULL, beta_ARS_extreme = NULL,
  df = NULL, V = NULL, M = 500, n.chains = 3, thin = 1,
  warmup = 500, method = "simple", outFormat = NULL,
  startSmall = FALSE, df_vcov = 50, dir = NULL, keep_mcmc = FALSE,
  savext_all = FALSE, savext_mcmc = TRUE, add2varlist = c("deviance",
  "pd", "popt", "dic"), ...)
}
\arguments{
\item{rrr}{Sequence of integers (e.g., \code{1:100}) of length greater or
equal to 1 specifying the number of replications to run.}

\item{N}{number of persons}

\item{J}{number of items. Can be a vector for multiple traits (e.g.,
J=c(10,10,10)).}

\item{prop.rev}{number of reversed items. Can be a vector for multiple
traits(e.g., prop.rev=c(5,3,5)/10)}

\item{genModel}{Character. The data generating model (either "2012" or "ext").}

\item{fitModel}{Character. The model for data analysis ("2012", "ext", or both as vector
c("2012", "ext")).}

\item{fitMethod}{Character. Whether to use "stan" or "jags".}

\item{theta_vcov}{true covariance matrix of response processes (order:
middle, extreme, (acquiescence), trait). standard is diag(3) / diag(4). Can be a vector of variances (not SDs).}

\item{betas}{Optional list. May have entries \code{"beta.mrs"},
\code{"beta.ers"}, \code{"beta.trait"}, and/or \code{"beta.ars"}. Each of
those may have arguments passed to \code{\link[truncnorm]{rtruncnorm}}.}

\item{beta_ARS_extreme}{Numeric. Only for \code{genModel="ext"}: probability
(on probit scale) of choosing category 5 (vs.4) in case of ARS. Defaults to
\code{rtruncnorm(mean = qnorm(.7), sd = sqrt(.1), a = qnorm(.5), b =
qnorm(.9))}.}

\item{df}{degrees of freedom for wishart prior on covariance of traits
(default: number of processes + 1)}

\item{V}{prior for wishart distribution (default: diagonal matrix)}

\item{M}{number of MCMC samples (after warmup)}

\item{n.chains}{number of MCMC chains (and number of CPUs used)}

\item{thin}{thinning of MCMC samples}

\item{warmup}{number of samples for warmup (in JAGS: 1/5 for adaptation, 4/5
for burnin)}

\item{method}{Passed to \code{\link[runjags]{run.jags}}. Can be, for example,
\code{parallel} or \code{simple}.}

\item{outFormat}{either "mcmc.list" (can be analyzed with coda package) or
"stan" or "runjags"}

\item{startSmall}{Whether to use random starting values for beta sampled from
"wide" (FALSE) or "narrow" priors (TRUE; beta and theta
closer to 0; might solve problems with slow convergence of some chains for
extreme starting values).}

\item{df_vcov}{Numeric. Degrees of freedom for wishart distribution from
which the variance-covariance matrix for generating the data is drawn.}

\item{dir}{Path to directory where results should be stored,}

\item{keep_mcmc}{Logical indicating wheter to retain, besides a summary of
the parameters, the raw mcmc samples.}

\item{savext_all}{Logical indicating wheter to save the output from Stan/JAGS
in an external RData file.}

\item{savext_mcmc}{Logical indicating wheter to save the mcmc samples in
an external RData file.}

\item{add2varlist}{Additional variables to monitor (e.g., \code{c("deviance",
"pd", "popt", "dic")} for JAGS)}

\item{...}{further arguments passed to \code{\link[rstan]{sampling}} (for
Stan) or \code{\link[runjags]{run.jags}} (for JAGS)}
}
\value{
Function does not directly return anything but saves an external
  RData file to \code{dir}. This object is a list containing the generated
  parameters in \code{sim-results$param.sum$gen}, fitted parameters and other model fit
  information in \code{sim-results$param.sum$foo}, as well as a summary of the setup.
}
\description{
This function allows to run a simulation study of mpt2irt models. Data are
generated either from the Boeckenholt Model (\code{genModel = "2012"}) or
from the Acquiescence Model (\code{genModel = "ext"}). Subsequently, one or
both of these models are fit to the generated data using either JAGS or Stan.
The results are saved in an RData file in \code{dir}.
}
\details{
Note that a text file "progress.txt" is written (and updated) to \code{dir} informing you about the progress of the simulation.
}
\examples{
\dontrun{
recovery_irtree(rrr = 1:2, N = 20, J = 10, genModel = "ext", fitModel = "ext",
                fitMethod = "stan", M = 200, n.chains = 2, warmup = 200,
                dir = "~/")
                
# run multiple simulations in parallel using the 'parallel' package
no_cores <- parallel::detectCores() - 1
cl <- parallel::makeCluster(no_cores)
parallel::clusterApplyLB(cl, x = 11:13, fun = recovery_irtree, cores = 1,
                         N = 20, J = 10, genModel = "ext", fitModel = "ext",
                         fitMethod = "stan", M = 200, n.chains = 2, warmup = 200,
                         dir = "~/")
parallel::stopCluster(cl = cl)
}
}
